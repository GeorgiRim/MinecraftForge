--- a/net/minecraft/client/resources/model/MultiPartBakedModel.java
+++ b/net/minecraft/client/resources/model/MultiPartBakedModel.java
@@ -33,11 +_,7 @@
         this.selectors = p_119462_;
     }
 
-    @Override
-    public List<BakedQuad> getQuads(@Nullable BlockState p_235050_, @Nullable Direction p_235051_, RandomSource p_235052_) {
-        if (p_235050_ == null) {
-            return Collections.emptyList();
-        } else {
+    public BitSet getSelectors(@Nullable BlockState p_235050_) {
             BitSet bitset = this.selectorCache.get(p_235050_);
             if (bitset == null) {
                 bitset = new BitSet();
@@ -50,19 +_,45 @@
 
                 this.selectorCache.put(p_235050_, bitset);
             }
+            return bitset;
+    }
 
-            List<BakedQuad> list = new ArrayList<>();
+    // FORGE: Implement our overloads (here and below) so child models can have custom logic
+    public List<BakedQuad> getQuads(@Nullable BlockState p_235050_, @Nullable Direction p_235051_, RandomSource p_235052_, net.minecraftforge.client.model.data.ModelData modelData, @Nullable net.minecraft.client.renderer.RenderType renderType) {
+        if (p_235050_ == null) {
+            return Collections.emptyList();
+        } else {
+            BitSet bitset = getSelectors(p_235050_);
+            List<BakedQuad> list = new ArrayList<>();;
             long j = p_235052_.nextLong();
 
             for (int k = 0; k < bitset.length(); k++) {
                 if (bitset.get(k)) {
                     p_235052_.setSeed(j);
-                    list.addAll(this.selectors.get(k).model.getQuads(p_235050_, p_235051_, p_235052_));
+                    var model = this.selectors.get(k).model();
+                    // FORGE: Only put quad data if the model is using the render type passed
+                    if (renderType != null && !model.getRenderTypes(p_235050_, p_235052_, modelData).contains(renderType))
+                        continue;
+                    var data = net.minecraftforge.client.model.data.MultipartModelData.resolve(modelData, model);
+                    list.addAll(model.getQuads(p_235050_, p_235051_, p_235052_, data, renderType));
                 }
             }
 
-            return list;
-        }
+            return net.minecraftforge.common.util.ConcatenatedListView.of(list);
+        }
+    }
+
+    @Override // FORGE: Get render types based on the selectors matched by the given block state
+    public net.minecraftforge.client.ChunkRenderTypeSet getRenderTypes(BlockState state, RandomSource rand, net.minecraftforge.client.model.data.ModelData data) {
+        var renderTypeSets = new java.util.LinkedList<net.minecraftforge.client.ChunkRenderTypeSet>();
+        var selectors = getSelectors(state);
+        for (int i = 0; i < selectors.length(); i++) {
+            if (selectors.get(i)) {
+                renderTypeSets.add(this.selectors.get(i).model().getRenderTypes(state, rand, data));
+            }
+        }
+
+        return net.minecraftforge.client.ChunkRenderTypeSet.union(renderTypeSets);
     }
 
     @OnlyIn(Dist.CLIENT)
