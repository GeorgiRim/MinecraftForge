--- a/net/minecraft/client/resources/model/ModelManager.java
+++ b/net/minecraft/client/resources/model/ModelManager.java
@@ -72,7 +_,9 @@
         ResourceLocation.withDefaultNamespace("blocks")
     );
     private Map<ModelResourceLocation, BakedModel> bakedBlockStateModels = Map.of();
+    private Map<ModelResourceLocation, BakedModel> bakedBlockStateModelsView = Map.of();
     private Map<ResourceLocation, ItemModel> bakedItemStackModels = Map.of();
+    private Map<ResourceLocation, ItemModel> bakedItemStackModelsView = Map.of();
     private Map<ResourceLocation, ClientItem.Properties> itemProperties = Map.of();
     private final AtlasSet atlases;
     private final BlockModelShaper blockModelShaper;
@@ -83,6 +_,7 @@
     private BakedModel missingModel;
     private ItemModel missingItemModel;
     private Object2IntMap<BlockState> modelGroups = Object2IntMaps.emptyMap();
+    private ModelBakery modelBakery;
 
     public ModelManager(TextureManager p_119406_, BlockColors p_119407_, int p_119408_) {
         this.blockColors = p_119407_;
@@ -95,6 +_,10 @@
         return this.bakedBlockStateModels.getOrDefault(p_119423_, this.missingModel);
     }
 
+    public Map<ModelResourceLocation, BakedModel> getModels() {
+        return this.bakedBlockStateModelsView;
+    }
+
     public BakedModel getMissingModel() {
         return this.missingModel;
     }
@@ -103,6 +_,10 @@
         return this.bakedItemStackModels.getOrDefault(p_376816_, this.missingItemModel);
     }
 
+    public Map<ResourceLocation, ItemModel> getItemModels() {
+        return this.bakedItemStackModelsView;
+    }
+
     public ClientItem.Properties getItemProperties(ResourceLocation p_378319_) {
         return this.itemProperties.getOrDefault(p_378319_, ClientItem.Properties.DEFAULT);
     }
@@ -115,6 +_,7 @@
     public final CompletableFuture<Void> reload(
         PreparableReloadListener.PreparationBarrier p_249079_, ResourceManager p_251134_, Executor p_250550_, Executor p_249221_
     ) {
+        net.minecraftforge.client.model.geometry.GeometryLoaderManager.init();
         UnbakedModel unbakedmodel = MissingBlockModel.missingModel();
         CompletableFuture<EntityModelSet> completablefuture = CompletableFuture.supplyAsync(EntityModelSet::vanilla, p_250550_);
         CompletableFuture<SpecialBlockModelRenderer> completablefuture1 = completablefuture.thenApplyAsync(SpecialBlockModelRenderer::vanilla, p_250550_);
@@ -260,13 +_,15 @@
                         p_374740_.stream().sorted().map(p_374742_ -> "    " + p_374742_).collect(Collectors.joining("\n"))
                     )
             );
+        p_252136_.popPush("forge_modify_baking_result");
+        net.minecraftforge.client.ForgeHooksClient.onModifyBakingResult(p_248945_, modelbakery$bakingresult);
         p_252136_.popPush("dispatch");
         Map<BlockState, BakedModel> map = createBlockStateToModelDispatch(modelbakery$bakingresult.blockStateModels(), modelbakery$bakingresult.missingModel());
         CompletableFuture<Void> completablefuture = CompletableFuture.allOf(
             p_250646_.values().stream().map(AtlasSet.StitchResult::readyForUpload).toArray(CompletableFuture[]::new)
         );
         p_252136_.pop();
-        return new ModelManager.ReloadState(modelbakery$bakingresult, p_361513_, map, p_250646_, p_378097_, p_377275_, completablefuture);
+        return new ModelManager.ReloadState(modelbakery$bakingresult, p_361513_, map, p_250646_, p_378097_, p_377275_, completablefuture, p_248945_);
     }
 
     private static Map<BlockState, BakedModel> createBlockStateToModelDispatch(Map<ModelResourceLocation, BakedModel> p_377857_, BakedModel p_378390_) {
@@ -298,11 +_,15 @@
         p_248996_.atlasPreparations.values().forEach(AtlasSet.StitchResult::upload);
         ModelBakery.BakingResult modelbakery$bakingresult = p_248996_.bakedModels;
         this.bakedBlockStateModels = modelbakery$bakingresult.blockStateModels();
+        this.bakedBlockStateModelsView = java.util.Collections.unmodifiableMap(this.bakedBlockStateModels);
         this.bakedItemStackModels = modelbakery$bakingresult.itemStackModels();
+        this.bakedItemStackModelsView = java.util.Collections.unmodifiableMap(this.bakedItemStackModels);
         this.itemProperties = modelbakery$bakingresult.itemProperties();
         this.modelGroups = p_248996_.modelGroups;
         this.missingModel = modelbakery$bakingresult.missingModel();
         this.missingItemModel = modelbakery$bakingresult.missingItemModel();
+        this.modelBakery = p_248996_.modelBakery();
+        net.minecraftforge.client.ForgeHooksClient.onModelBake(this, this.modelBakery);
         p_251960_.popPush("cache");
         this.blockModelShaper.replaceCache(p_248996_.modelCache);
         this.specialBlockModelRenderer = p_248996_.specialBlockModelRenderer;
@@ -329,6 +_,7 @@
     }
 
     public TextureAtlas getAtlas(ResourceLocation p_119429_) {
+        if (this.atlases == null) throw new RuntimeException("getAtlasTexture called too early!");
         return this.atlases.getAtlas(p_119429_);
     }
 
@@ -341,6 +_,10 @@
         this.maxMipmapLevels = p_119411_;
     }
 
+    public ModelBakery getModelBakery() {
+        return com.google.common.base.Preconditions.checkNotNull(modelBakery, "Attempted to query model bakery before it has been initialized.");
+    }
+
     public Supplier<SpecialBlockModelRenderer> specialBlockModelRenderer() {
         return () -> this.specialBlockModelRenderer;
     }
@@ -357,7 +_,8 @@
         Map<ResourceLocation, AtlasSet.StitchResult> atlasPreparations,
         EntityModelSet entityModelSet,
         SpecialBlockModelRenderer specialBlockModelRenderer,
-        CompletableFuture<Void> readyForUpload
+        CompletableFuture<Void> readyForUpload,
+        ModelBakery modelBakery
     ) {
     }
 }
