--- a/net/minecraft/client/resources/model/SimpleBakedModel.java
+++ b/net/minecraft/client/resources/model/SimpleBakedModel.java
@@ -25,6 +_,15 @@
     protected final boolean usesBlockLight;
     protected final TextureAtlasSprite particleIcon;
     protected final ItemTransforms transforms;
+    protected final net.minecraftforge.client.ChunkRenderTypeSet blockRenderTypes;
+    protected final List<net.minecraft.client.renderer.RenderType> itemRenderTypes;
+    protected final List<net.minecraft.client.renderer.RenderType> fabulousItemRenderTypes;
+
+    /** @deprecated Forge: Use {@linkplain #SimpleBakedModel(List, Map, boolean, boolean, boolean, TextureAtlasSprite, ItemTransforms, net.minecraftforge.client.RenderTypeGroup) variant with RenderTypeGroup} **/
+    @Deprecated
+    public SimpleBakedModel(List<BakedQuad> p_119489_, Map<Direction, List<BakedQuad>> p_119490_, boolean p_119491_, boolean p_119492_, boolean p_119493_, TextureAtlasSprite p_119494_, ItemTransforms p_119495_) {
+        this(p_119489_, p_119490_, p_119491_, p_119492_, p_119493_, p_119494_, p_119495_, net.minecraftforge.client.RenderTypeGroup.EMPTY);
+    }
 
     public SimpleBakedModel(
         List<BakedQuad> p_119489_,
@@ -33,7 +_,8 @@
         boolean p_119492_,
         boolean p_119493_,
         TextureAtlasSprite p_119494_,
-        ItemTransforms p_119495_
+        ItemTransforms p_119495_,
+        net.minecraftforge.client.RenderTypeGroup renderTypes
     ) {
         this.unculledFaces = p_119489_;
         this.culledFaces = p_119490_;
@@ -42,6 +_,9 @@
         this.usesBlockLight = p_119492_;
         this.particleIcon = p_119494_;
         this.transforms = p_119495_;
+        this.blockRenderTypes = !renderTypes.isEmpty() ? net.minecraftforge.client.ChunkRenderTypeSet.of(renderTypes.block()) : null;
+        this.itemRenderTypes = !renderTypes.isEmpty() ? List.of(renderTypes.entity()) : null;
+        this.fabulousItemRenderTypes = !renderTypes.isEmpty() ? List.of(renderTypes.entityFabulous()) : null;
     }
 
     @Override
@@ -79,6 +_,25 @@
         return this.transforms;
     }
 
+    @Override
+    public net.minecraftforge.client.ChunkRenderTypeSet getRenderTypes(BlockState state, RandomSource rand, net.minecraftforge.client.model.data.ModelData data) {
+       return blockRenderTypes != null ? blockRenderTypes : BakedModel.super.getRenderTypes(state, rand, data);
+    }
+
+    @Override
+    public List<net.minecraft.client.renderer.RenderType> getRenderTypes(net.minecraft.world.item.ItemStack itemStack, boolean fabulous) {
+       if (!fabulous) {
+          if (itemRenderTypes != null) {
+              return itemRenderTypes;
+          }
+       } else {
+          if (fabulousItemRenderTypes != null) {
+              return fabulousItemRenderTypes;
+          }
+       }
+       return BakedModel.super.getRenderTypes(itemStack, fabulous);
+    }
+
     @OnlyIn(Dist.CLIENT)
     public static class Builder {
         private final ImmutableList.Builder<BakedQuad> unculledFaces = ImmutableList.builder();
@@ -124,13 +_,19 @@
             return this;
         }
 
+        private net.minecraftforge.client.RenderTypeGroup renderTypes = net.minecraftforge.client.RenderTypeGroup.EMPTY;
+        public SimpleBakedModel.Builder renderTypes(net.minecraftforge.client.RenderTypeGroup renderTypes) {
+            this.renderTypes = renderTypes;
+            return this;
+        }
+
         public BakedModel build() {
             if (this.particleIcon == null) {
                 throw new RuntimeException("Missing particle!");
             } else {
                 Map<Direction, List<BakedQuad>> map = Maps.transformValues(this.culledFaces, ImmutableList.Builder::build);
                 return new SimpleBakedModel(
-                    this.unculledFaces.build(), new EnumMap<>(map), this.hasAmbientOcclusion, this.usesBlockLight, this.isGui3d, this.particleIcon, this.transforms
+                    this.unculledFaces.build(), new EnumMap<>(map), this.hasAmbientOcclusion, this.usesBlockLight, this.isGui3d, this.particleIcon, this.transforms, this.renderTypes
                 );
             }
         }
