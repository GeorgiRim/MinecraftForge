--- a/net/minecraft/client/gui/screens/options/controls/KeyBindsScreen.java
+++ b/net/minecraft/client/gui/screens/options/controls/KeyBindsScreen.java
@@ -41,7 +_,7 @@
     protected void addFooter() {
         this.resetButton = Button.builder(Component.translatable("controls.resetAll"), p_343640_ -> {
             for (KeyMapping keymapping : this.options.keyMappings) {
-                keymapping.setKey(keymapping.getDefaultKey());
+                keymapping.setToDefault();
             }
 
             this.keyBindsList.resetMappingAndUpdateButtons();
@@ -73,11 +_,12 @@
     public boolean keyPressed(int p_342715_, int p_342862_, int p_345515_) {
         if (this.selectedKey != null) {
             if (p_342715_ == 256) {
-                this.selectedKey.setKey(InputConstants.UNKNOWN);
+                this.selectedKey.setKeyModifierAndCode(null, InputConstants.UNKNOWN);
             } else {
-                this.selectedKey.setKey(InputConstants.getKey(p_342715_, p_342862_));
+                this.selectedKey.setKeyModifierAndCode(null, InputConstants.getKey(p_342715_, p_342862_));
             }
 
+            if (p_342715_ == 256 || !net.minecraftforge.client.settings.KeyModifier.isKeyCodeModifier(this.selectedKey.getKey()))
             this.selectedKey = null;
             this.lastKeySelection = Util.getMillis();
             this.keyBindsList.resetMappingAndUpdateButtons();
@@ -100,5 +_,18 @@
         }
 
         this.resetButton.active = flag;
+    }
+
+    @Override
+    public boolean keyReleased(int keyCode, int scanCode, int modifiers) {
+        // Forge: We wait for a second key above if the first press is a modifier
+        // but if they release the modifier then set it explicitly.
+        var key = InputConstants.getKey(keyCode, scanCode);
+        if (this.selectedKey != null && this.selectedKey.getKey() == key) {
+            this.selectedKey = null;
+            this.lastKeySelection = Util.getMillis();
+            this.keyBindsList.resetMappingAndUpdateButtons();
+        }
+        return super.keyReleased(keyCode, scanCode, modifiers);
     }
 }
