--- a/net/minecraft/stats/RecipeBookSettings.java
+++ b/net/minecraft/stats/RecipeBookSettings.java
@@ -14,7 +_,7 @@
     public static final StreamCodec<FriendlyByteBuf, RecipeBookSettings> STREAM_CODEC = StreamCodec.ofMember(
         RecipeBookSettings::write, RecipeBookSettings::read
     );
-    private static final Map<RecipeBookType, Pair<String, String>> TAG_FIELDS = ImmutableMap.of(
+    private static final Map<RecipeBookType, Pair<String, String>> TAG_FIELDS = new java.util.HashMap<>(ImmutableMap.of(
         RecipeBookType.CRAFTING,
         Pair.of("isGuiOpen", "isFilteringCraftable"),
         RecipeBookType.FURNACE,
@@ -23,7 +_,7 @@
         Pair.of("isBlastingFurnaceGuiOpen", "isBlastingFurnaceFilteringCraftable"),
         RecipeBookType.SMOKER,
         Pair.of("isSmokerGuiOpen", "isSmokerFilteringCraftable")
-    );
+    ));
     private final Map<RecipeBookType, RecipeBookSettings.TypeSettings> states;
 
     private RecipeBookSettings(Map<RecipeBookType, RecipeBookSettings.TypeSettings> p_12730_) {
@@ -146,5 +_,10 @@
         public RecipeBookSettings.TypeSettings setFiltering(boolean p_366242_) {
             return new RecipeBookSettings.TypeSettings(this.open, p_366242_);
         }
+    }
+
+    // FORGE -- called automatically on Enum creation - used for serialization
+    public static void addTagsForType(RecipeBookType type, String openTag, String filteringTag) {
+        TAG_FIELDS.put(type, Pair.of(openTag, filteringTag));
     }
 }
