--- ../src-base/minecraft/cpw/mods/fml/common/ModContainerFactory.java
+++ ../src-work/minecraft/cpw/mods/fml/common/ModContainerFactory.java
@@ -30,7 +30,7 @@
 public class ModContainerFactory
 {
     public static Map<Type, Constructor<? extends ModContainer>> modTypes = Maps.newHashMap();
-    private static Pattern modClass = Pattern.compile(".*(\\.|)(mod\\_[^\\s$]+)$");
+    //private static Pattern modClass = Pattern.compile(".*(\\.|)(mod\\_[^\\s$]+)$");
     private static ModContainerFactory INSTANCE = new ModContainerFactory();
     
     private ModContainerFactory() {
@@ -54,7 +54,7 @@
     public ModContainer build(ASMModParser modParser, File modSource, ModCandidate container)
     {
         String className = modParser.getASMType().getClassName();
-        if (modParser.isBaseMod(container.getRememberedBaseMods()) && modClass.matcher(className).find())
+        /*if (modParser.isBaseMod(container.getRememberedBaseMods()) && modClass.matcher(className).find())
         {
             FMLLog.severe("Found a BaseMod type mod %s", className);
             FMLLog.severe("This will not be loaded and will be ignored. ModLoader mechanisms are no longer available.");
@@ -68,7 +68,7 @@
         {
             FMLLog.fine("Found a basemod %s of non-standard naming format", className);
             container.rememberBaseModType(className);
-        }
+        }*/
 
         for (ModAnnotation ann : modParser.getAnnotations())
         {
